/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
buildscript {
    repositories {
        jcenter() // this applies only to the Gradle 'Shadow' plugin
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
        classpath 'ru.vyarus:gradle-quality-plugin:4.3.0'
    }
}

plugins {
    id 'java'
    id 'application'

    // provide pretty output to the console for tests
    id 'com.adarshr.test-logger' version '2.1.0'

    // shadow plugin to produce fat JARs
    id 'com.github.johnrengelman.shadow' version '5.2.0'

    // http://xvik.github.io/gradle-quality-plugin/4.3.0/getting-started/
    id 'ru.vyarus.quality' version '4.3.0' // no config out of the box
}


// artifact properties
group = 'org.myorg.quickstart'
version = '1.0'
mainClassName = 'org.myorg.quickstart.StreamingJob'
description = """Flink Quickstart Job"""

ext {
    javaVersion = '1.8'
    junitVersion = '5.6.2'
    flinkVersion = '1.11.0'
    scalaBinaryVersion = '2.11'
    slf4jVersion = '1.7.15'
    log4jVersion = '2.12.1'
}


task startJob(type: Exec) {
  commandLine "./scripts/start-job.sh"
}

task stopJob(type: Exec) {
  commandLine "./scripts/stop-job.sh"
}


task createTopics(type: Exec) {
  commandLine "./create-topics.sh"
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]

wrapper {
    gradleVersion = '6.5.1'
}

// declare where to find the dependencies of your project
repositories {
    mavenCentral()
    maven { url "https://repository.apache.org/content/repositories/snapshots/" }
}

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'

}

// For details see https://github.com/radarsh/gradle-test-logger-plugin
testlogger {
    theme 'mocha'
    slowThreshold 5000
    logLevel 'QUIET'
}

test {
    useJUnitPlatform()

    testLogging {
      events "passed", "skipped", "failed"
    }
}

// declare the dependencies for your production and test code
dependencies {
    // --------------------------------------------------------------
    // Compile-time dependencies that should NOT be part of the
    // shadow jar and are provided in the lib folder of Flink
    // --------------------------------------------------------------
    compile "org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}"
    compile "org.apache.flink:flink-runtime-web_$scalaBinaryVersion:$flinkVersion"

    // --------------------------------------------------------------
    // Dependencies that should be part of the shadow jar, e.g.
    // connectors. These must be in the flinkShadowJar configuration!
    // --------------------------------------------------------------
    flinkShadowJar "org.apache.flink:flink-connector-kafka_2.11:${flinkVersion}"

    compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    compile group: 'org.apache.flink', name: 'flink-connector-kafka_2.11', version: '1.11.0'

    // Add test dependencies here.
    //testCompile "junit:junit:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.4.6'
    testCompile group: 'org.assertj', name:'assertj-core', version: '3.16.1'


    testCompile "org.apache.flink:flink-test-utils_$scalaBinaryVersion:$flinkVersion"
    testCompile "org.apache.flink:flink-runtime_$scalaBinaryVersion:$flinkVersion:tests"
    testCompile "org.apache.flink:flink-streaming-java_$scalaBinaryVersion:$flinkVersion:tests"
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

shadowJar {
    baseName 'flink-stream-job'
    zip64 true
    configurations = [project.configurations.flinkShadowJar]
}
